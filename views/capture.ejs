<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <title>Image Capture and Submit</title>
    <style>
      body {
        width: 100vw;
        height: 100vh;
        font-family: "Roboto", sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 0;
        padding: 0;
        /* background: linear-gradient(to right, #000000, #33526d); */
        color: #fff;
        /* background-image: url("/bg.png"); */
        overflow: hidden;
        position: fixed;
        background-color: #1d1d1d;
      }

      #logo {
        width: 320px;
        height: 95px;
        position: absolute;
        left: 50%;
        top: 8%;
        transform: translate(-50%, -50%);
        z-index: -1000;
      }

      video {
        display: none;
        margin-top: 200px;
        width: 770px;
        height: 700px;
        object-fit: contain;
      }

      #imageContainer {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        margin: 30px 0;
      }
      #imageContainer img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border: 2px solid #fff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        margin: 0 30px;
        display: none;
      }
      #submitForm {
        display: none;
        margin-top: 20px;
      }
      #captureBtn {
        height: 120px;
        width: 120px;
        border: none;
        cursor: pointer;
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 3000;
        background-image: url("/c.gif");
        background-repeat: no-repeat;
        background-position: center;
        background-size: contain;
        border-radius: 24px;
      }
      h6 {
        cursor: pointer;
        position: absolute;
        left: 50%;
        top: 54%;
        transform: translate(-50%, -50%);
      }
      #message {
        position: absolute;
        left: 50%;
        top: 80%;
        transform: translate(-50%, -50%);
        z-index: 3000;
        display: none;
      }
      #result {
        /* display: none; */
        /* max-width: 100%; */
        max-height: 700px;
        box-shadow: rgba(255, 255, 255) 0px 3px 8px;
        margin-top: 20px;
      }
      #countdown {
        width: 300px;
        height: 300px;
        background-image: url("/countdown.gif");
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        position: absolute;
        display: none;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 3000;
      }
      #qrContainer {
        background-color: whitesmoke;
        width: 300px;
        height: 300px;
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        align-items: center;
        align-items: center;
      }
      #finalContainer {
        padding-top: 100px;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: space-around;
        text-align: center;
      }

      #loading {
        display: none;
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
      }
      .loader,
      .loader:before,
      .loader:after {
        border-radius: 50%;
        width: 2.5em;
        height: 2.5em;
        animation-fill-mode: both;
        animation: bblFadInOut 1.8s infinite ease-in-out;
      }
      .loader {
        color: #fff;
        font-size: 7px;
        position: relative;
        text-indent: -9999em;
        transform: translateZ(0);
        animation-delay: -0.16s;
      }
      .loader:before,
      .loader:after {
        content: "";
        position: absolute;
        top: 0;
      }
      .loader:before {
        left: -3.5em;
        animation-delay: -0.32s;
      }
      .loader:after {
        left: 3.5em;
      }

      @keyframes bblFadInOut {
        0%,
        80%,
        100% {
          box-shadow: 0 2.5em 0 -1.3em;
        }
        40% {
          box-shadow: 0 2.5em 0 0;
        }
      }
      #fullscreenButton {
        position: absolute;
        left: 0;
        top: 0;
        margin: 10px;
        width: 100px;
        height: 100px;
        background-color: transparent;
        border: none;
        cursor: pointer;
      }

      /* Mobile specific styles */
      @media (max-width: 768px) {
        video {
          display: block;
          margin-top: 200px;
          width: 90vw;
          height: auto;
          object-fit: contain;
        }

        #imageContainer {
          width: 100%;
          display: flex;
          align-items: center;
          margin: 15px 0;
        }

        #imageContainer img {
          width: 80px;
          height: 80px;
          margin: 10px 0;
        }

        #result {
          /* max-width: 90vw; */
          max-height: 300px;
          /* width: 100%; */
          margin-top: 30px;
        }

        #qrContainer {
          background-color: whitesmoke;
          width: 260px;
          height: 260px;
          display: flex;
          flex-direction: column;
          justify-content: space-evenly;
          align-items: center;
          align-items: center;
        }

        #finalContainer {
          padding-top: 100px;
          width: 100%;
          height: 100%;
          display: flex;
          flex-direction: row;
          align-items: center;
          justify-content: space-around;
          text-align: center;
        }

        #captureBtn {
          height: 80px;
          width: 80px;
        }

        #countdown {
          width: 200px;
          height: 200px;
        }
      }
    </style>
  </head>
  <body id="fullscreenElement">
    <img id="logo" src="/logo.png" alt="" />
    <section id="main">
      <button id="fullscreenButton"></button>
      <h3 id="message">Get ready countdown will start soon.</h3>
      <div>
        <button id="captureBtn" onclick="getStarted()"></button>
        <h6 id="openCamera">Open Camera</h6>
      </div>
      <div id="countdown"></div>
      <video id="video" autoplay></video>
      <div id="imageContainer">
        <img id="imagePreview1" src="#" alt="Image 1" />
        <img id="imagePreview2" src="#" alt="Image 2" />
        <img id="imagePreview3" src="#" alt="Image 3" />
      </div>
      <form id="submitForm">
        <input type="submit" value="Submit Images" />
      </form>
    </section>

    <span id="loading" class="loader"></span>

    <div id="finalContainer" style="display: none">
      <img id="result" src="" alt="Result Image" />
      <section>
        <div id="qrContainer">
          <div id="qrcode"></div>
        </div>
        <h3>Sacn the QR code to</h3>
        <h3>DOWNLOAD YOUR PHOTO!</h3>
      </section>
    </div>

    <script>
      const fullscreenElement = document.getElementById("fullscreenElement");
      const fullscreenButton = document.getElementById("fullscreenButton");

      fullscreenButton.addEventListener("click", () => {
        if (fullscreenElement.requestFullscreen) {
          fullscreenElement.requestFullscreen();
        } else if (fullscreenElement.mozRequestFullScreen) {
          // Firefox
          fullscreenElement.mozRequestFullScreen();
        } else if (fullscreenElement.webkitRequestFullscreen) {
          // Chrome, Safari and Opera
          fullscreenElement.webkitRequestFullscreen();
        } else if (fullscreenElement.msRequestFullscreen) {
          // IE/Edge
          fullscreenElement.msRequestFullscreen();
        }
      });

      document.addEventListener("fullscreenchange", () => {
        if (document.fullscreenElement) {
          fullscreenButton.textContent = "";
        } else {
          fullscreenButton.textContent = "";
        }
      });

      document.addEventListener("webkitfullscreenchange", () => {
        if (document.webkitFullscreenElement) {
          fullscreenButton.textContent = "Exit Fullscreen";
        } else {
          fullscreenButton.textContent = "Go Fullscreen";
        }
      });

      document.addEventListener("mozfullscreenchange", () => {
        if (document.mozFullScreenElement) {
          fullscreenButton.textContent = "Exit Fullscreen";
        } else {
          fullscreenButton.textContent = "Go Fullscreen";
        }
      });

      document.addEventListener("msfullscreenchange", () => {
        if (document.msFullscreenElement) {
          fullscreenButton.textContent = "Exit Fullscreen";
        } else {
          fullscreenButton.textContent = "Go Fullscreen";
        }
      });

      var loadingElement = document.getElementById("loading");
      var main = document.getElementById("main");
      const video = document.getElementById("video");
      const captureBtn = document.getElementById("captureBtn");
      const countdown = document.getElementById("countdown");
      const message = document.getElementById("message");
      var qrcodeContainer = document.getElementById("qrcode");
      var finalContainer = document.getElementById("finalContainer");
      const submitForm = document.getElementById("submitForm");
      const resultImage = document.getElementById("result");

      const imagePreviews = [
        document.getElementById("imagePreview1"),
        document.getElementById("imagePreview2"),
        document.getElementById("imagePreview3"),
      ];
      var currentImageIndex = 0;
      const capturedImages = [];

      async function startVideoStream() {
        const constraints = {
          video: true,
          audio: false,
        };

        try {
          const stream = await navigator.mediaDevices.getUserMedia(constraints);
          video.srcObject = stream;
        } catch (error) {
          console.error("Error accessing the camera:", error);
        }
      }

      // Function to handle image capture
      const getStarted = async () => {
        if (currentImageIndex >= 3) {
          alert("All images have been captured");
          return;
        }
        video.style.display = "block";
        captureBtn.style.display = "none";
        document.getElementById("openCamera").style.display = "none";
        await sleep(2000);
        captureBtn.style.display = "none";
        message.style.display = "block";
        await sleep(2000);
        message.style.display = "none";
        captureImagesWithDelay();
      };

      async function captureImagesWithDelay() {
        try {
          for (let i = 0; i < 3; i++) {
            countdown.style.display = "block";
            await sleep(2500);
            countdown.style.display = "none";
            console.log("countdown completed");
            await sleep(100);
            const capturedImage = captureImage();
            capturedImages.push(capturedImage);
            displayImagePreview(capturedImage, currentImageIndex);
            console.log("image clicked - now sleep");
            if (i === 2) {
              console.log(i);
              await sleep(1000);
            } else {
              console.log(i);
              await sleep(5000);
            }
            currentImageIndex++;
          }

          submitImages();
        } catch (error) {
          console.error("Error capturing image:", error);
        } finally {
          captureBtn.disabled = false;
        }
      }

      function captureImage() {
        const canvas = document.createElement("canvas");
        canvas.width = 960;
        canvas.height = 1280;
        const context = canvas.getContext("2d");
        context.drawImage(video, 0, 0, 960, 1280);
        return canvas.toDataURL("image/png");
      }

      function displayImagePreview(imageDataURL, index) {
        imagePreviews[index].style.display = "block";
        imagePreviews[index].src = imageDataURL;
      }

      function generateQRCode(imageUrl) {
        qrcodeContainer.innerHTML = ""; // Clear previous QR code
        new QRCode(qrcodeContainer, imageUrl);
      }

      const submitImages = async () => {
        main.style.display = "none";
        loadingElement.style.display = "block";

        const formData = new FormData();

        for (let i = 0; i < capturedImages.length; i++) {
          const blob = dataURLToBlob(capturedImages[i]);
          formData.append(`image${i + 1}`, blob, `image${i + 1}.png`);
        }

        try {
          const response = await fetch("/upload-images", {
            method: "POST",
            body: formData,
          });

          if (!response.ok) {
            throw new Error("Failed to upload images");
          }

          const responseData = await response.json();
          console.log("Images uploaded successfully:", responseData);
          resultImage.src = `${responseData.imageName}`;
          generateQRCode(responseData.imageName);
          await sleep(5000);
          loadingElement.style.display = "none";
          finalContainer.style.display = "flex";
        } catch (error) {
          console.error("Error uploading images:", error);
        }
      };

      function dataURLToBlob(dataURL) {
        const parts = dataURL.split(",");
        const byteString = atob(parts[1]);
        const mimeString = parts[0].split(":")[1].split(";")[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
          ia[i] = byteString.charCodeAt(i);
        }
        return new Blob([ab], { type: mimeString });
      }

      document.getElementById("qrcode").addEventListener("click", function () {
        //window.location.reload();
        currentImageIndex = 0;
        qrcodeContainer.innerHTML = "";
        resultImage.src = "";
        finalContainer.style.display = "none";
        video.style.display = "none";
        document.getElementById("imagePreview1").src = '';
        document.getElementById("imagePreview2").src = '';
        document.getElementById("imagePreview3").src = '';
        document.getElementById("imagePreview1").style.display = 'none';
        document.getElementById("imagePreview2").style.display = 'none';
        document.getElementById("imagePreview3").style.display = 'none';
        captureBtn.style.display = "block";
        main.style.display = "block";
      });

      startVideoStream();

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }
    </script>
  </body>
</html>
